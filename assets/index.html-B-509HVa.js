import{_ as i,c as n,a,o as l}from"./app-DHGoFUDo.js";const d="/svip/assets/QQ_1722306351083-CdQAnLK2.png",p="/svip/assets/QQ_1722307123348-Bxmmcajb.png",r="/svip/assets/QQ_1722308044554-DDJRi0Ac.png",t="/svip/assets/QQ_1722305832692-d4Avs7Ut.png",c="/svip/assets/QQ_1722306171587-CvCc83qf.png",e="/svip/assets/10redis%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%9C-B2O-EzaT.png",o="/svip/assets/11redis%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%9C2-CfhidC7H.png",u="/svip/assets/12redis%E6%B7%BB%E5%8A%A0%E5%80%BC-CqB_zACU.png",g="/svip/assets/13redis%E6%95%B0%E6%8D%AE-CeZ--O38.png",v={};function h(m,s){return l(),n("div",null,s[0]||(s[0]=[a('<h2 id="任务目标" tabindex="-1"><a class="header-anchor" href="#任务目标"><span>任务目标</span></a></h2><ul><li>掌握 Redis 容器化部署流程</li><li>熟练掌握 Redis 的 5 种核心数据类型的特点及适用场景，</li><li>能熟练运用各类基本命令完成数据的操作</li><li>学会开启智慧医疗项目持久化</li><li>能够将 Redis 相关知识应用到实际场景中</li></ul><h2 id="任务单元" tabindex="-1"><a class="header-anchor" href="#任务单元"><span>任务单元</span></a></h2><h3 id="任务一-部署并验证-redis-服务" tabindex="-1"><a class="header-anchor" href="#任务一-部署并验证-redis-服务"><span>任务一：部署并验证 Redis 服务</span></a></h3><h4 id="_1-1-任务描述" tabindex="-1"><a class="header-anchor" href="#_1-1-任务描述"><span>1-1 任务描述</span></a></h4><p>本任务通过 Docker 容器技术完成 Redis 的部署与基础验证。需拉取指定版本 Redis 镜像，运行容器并配置端口映射，进入容器使用<code>redis-cli</code>执行键值对操作，同时通过可视化工具连接验证。旨在掌握 Redis 容器化部署流程，理解其作为 NoSQL 数据库的特性，熟悉基础命令与连接方式，为智慧医疗项目缓存优化奠定实操基础。</p><h4 id="_1-2-必备知识点" tabindex="-1"><a class="header-anchor" href="#_1-2-必备知识点"><span>1-2 必备知识点</span></a></h4><h5 id="_3-1-1-sql数据库和nosql数据库" tabindex="-1"><a class="header-anchor" href="#_3-1-1-sql数据库和nosql数据库"><span>3.1.1 SQL数据库和NoSQL数据库</span></a></h5><p><strong>关系型数据库</strong></p><p><img src="'+d+'" alt=""></p><p>关系型数据库（SQL数据库）最典型的数据结构是表，由二维表及其之间的联系所组成的一个数据组织。 <strong>优点</strong>：</p><ul><li>易于维护：都是使用表结构，格式一致；</li></ul><p><img src="'+p+'" alt=""></p><ul><li><p>使用方便：SQL语言通用，可用于复杂查询；</p><ul><li>一对一的关系</li><li>一对多关系</li><li>多对多关系</li></ul></li><li><p>复杂操作：支持SQL，可用于一个表以及多个表之间非常复杂的查询。</p><ul><li>支持ACID（原子性、一致性、隔离性、持久性）</li></ul></li></ul><p><strong>缺点：</strong></p><ul><li>读写性能比较差，尤其是海量数据的高效率读写；</li><li>固定的表结构，灵活度稍欠；</li><li>高并发读写需求，传统关系型数据库来说，硬盘I/O是一个很大的瓶颈。</li></ul><p><strong>非关系数据库</strong></p><p>非关系数据库（NoSQL）被称作 Not only SQL或Non SQL 非关系数据库不以表格式存储和组织数据。不同数据点之间没有表、行、列或关系。数据存储在<strong>集合</strong>中。数据库通常是非结构化的并使用动态架构。</p><p>有四种主要类型的非关系数据库：</p><ul><li><strong>列式数据库</strong><ul><li>HBase</li><li>Cassandra</li><li>Riak</li></ul></li><li><strong>键-值数据库</strong><ul><li>Redis</li><li>Memcache</li></ul></li><li><strong>面向文档的数据库</strong><ul><li>CouchDB</li><li>MongoDB</li></ul></li><li><strong>图数据库</strong><ul><li>Neo4j</li></ul></li></ul><h5 id="_3-1-2-什么是redis" tabindex="-1"><a class="header-anchor" href="#_3-1-2-什么是redis"><span>3.1.2 什么是Redis</span></a></h5><p><img src="'+r+'" alt=""></p><p>Redis 是一个开源的（BSD 许可），内存中的数据结构存储系统，可以用作数据库、缓存和消息中间件。它支持多种类型的数据结构，如字符串、哈希、列表、集合、有序集合、位图、HyperLog 和地理空间索引半径查询等。Redis 内置复制（replication）、LUA 脚本（Lua scripting）、LRU 驱动事件（LRU eviction）、事务（transactions）和不同级别的磁盘持久化（persistence），并通过 Redis Sentinel（哨兵） 和自动分区（Cluster）提供高可用性（high availability）。</p><p><a href="https://redis.io/" target="_blank" rel="noopener noreferrer">Redis - The Real-time Data Platform</a></p><p><img src="'+t+'" alt=""></p><p>2008年，意大利一家创业公司Merzia的创始人Salvatore Sanfilippo为了避免MySQL的低性能，亲自定做一个数据库，并于2009年开发完成了Redis的最初版本。 ​Salvatore Sanfilippo自己也没有想到，短短的几年时间，Redis就拥有了庞大的用户群体。Hacker News在2012年发布了一份数据库的使用情况调查，结果显示有近12%的公司在使用Redis。国内如新浪微博、街旁和知乎，国外如GitHub、Stack Overflow、Flickr、暴雪和Instagram，都是Redis的用户。</p><p>如今，Redis 已成为主流，其足迹几乎出现在所有 Web 服务中。根据 Stack Overflow 的调查，Redis 已连续五年成为最受欢迎的数据库。</p><p><img src="'+c+`" alt=""></p><h5 id="_3-1-3-redis的应用场景" tabindex="-1"><a class="header-anchor" href="#_3-1-3-redis的应用场景"><span>3.1.3 Redis的应用场景</span></a></h5><ol><li><strong>缓存</strong>：Redis 常用于缓存系统，因为它的读写速度非常快，并且支持丰富的数据类型。可以用来缓存数据库查询结果、会话数据、网页内容等。</li><li><strong>消息队列</strong>：使用 Redis 的 List 数据结构，可以轻松实现一个高效的消息队列系统。利用 List 的 PUSH 和 POP 操作，可以实现消息的发布与订阅。</li><li><strong>实时数据分析</strong>：Redis 的高性能和丰富的数据结构使其非常适合用于实时数据分析。例如，使用 Sorted Sets 实现排行榜功能，或者使用 HyperLogLog 进行唯一值计数。</li><li><strong>分布式锁</strong>：Redis 可以用来实现分布式锁，利用其原子性操作（如 SETNX 和 EXPIRE），可以确保多个进程或线程间的互斥访问。</li><li><strong>会话存储</strong>：由于 Redis 是内存数据库，非常适合作为会话存储，特别是对于需要快速读取和写入会话数据的应用程序。</li><li><strong>地理位置计算</strong>：Redis 支持地理空间索引和半径查询，可以用于存储和查询地理位置数据，例如实现“附近的人”功能。</li></ol><h5 id="_3-1-4-redis与其他数据库的对比" tabindex="-1"><a class="header-anchor" href="#_3-1-4-redis与其他数据库的对比"><span>3.1.4 Redis与其他数据库的对比</span></a></h5><ol><li><strong>与关系型数据库（如 MySQL、PostgreSQL）对比</strong>： <ul><li><strong>数据结构</strong>：关系型数据库使用表格来存储数据，数据以行和列的形式存在；而 Redis 使用丰富的数据结构，如字符串、哈希、列表、集合和有序集合。</li><li><strong>性能</strong>：Redis 将所有数据存储在内存中，读写速度非常快；而关系型数据库将数据存储在磁盘中，读写速度相对较慢。</li><li><strong>使用场景</strong>：关系型数据库适用于需要复杂查询和事务支持的场景，而 Redis 更适合用于缓存、高速数据读取和写入、消息队列等场景。</li></ul></li><li><strong>与键值数据库（如 Memcached）对比</strong>： <ul><li><strong>数据类型</strong>：Memcached 仅支持简单的键值对存储，数据类型非常有限；而 Redis 支持丰富的数据结构。</li><li><strong>持久化</strong>：Memcached 主要用作缓存，没有持久化机制；而 Redis 支持多种持久化机制，可以将数据存储在磁盘上。</li><li><strong>功能</strong>：Redis 支持复杂的操作和高级功能，如事务、发布/订阅、Lua 脚本等，而 Memcached 功能较为简单。</li></ul></li><li><strong>与文档数据库（如 MongoDB）对比</strong>： <ul><li><strong>数据模型</strong>：MongoDB 使用 BSON 格式存储文档，适合存储和查询复杂的嵌套数据；而 Redis 使用键值对存储，并支持多种数据结构。</li><li><strong>查询能力</strong>：MongoDB 提供强大的查询语言，可以进行复杂的查询和聚合操作；而 Redis 提供简单的键值查询和数据结构操作，查询能力相对较弱。</li><li><strong>使用场景</strong>：MongoDB 适合用于需要灵活的文档结构和强大查询能力的应用场景，而 Redis 更适合用于需要高速读写和简单数据操作的场景。</li></ul></li></ol><h4 id="_1-3-任务实施" tabindex="-1"><a class="header-anchor" href="#_1-3-任务实施"><span>1-3 任务实施</span></a></h4><p>本任务是在docker上安装redis，并运行redis容器。实施步骤如下所示。</p><p>1）拉取redis:6.0.9</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>root@hp-None:~# docker pull redis:6.0.9</span></span>
<span class="line"><span>6.0.9: Pulling from library/redis</span></span>
<span class="line"><span>a076a628af6f: Pull complete </span></span>
<span class="line"><span>f40dd07fe7be: Pull complete </span></span>
<span class="line"><span>ce21c8a3dbee: Pull complete </span></span>
<span class="line"><span>47b0fe76214f: Pull complete </span></span>
<span class="line"><span>6c5e46e23ecb: Pull complete </span></span>
<span class="line"><span>e81e24116351: Pull complete </span></span>
<span class="line"><span>Digest: sha256:48c1431bed43fb2645314e4a22d6ca03cf36c5541d034de6a4f3330e7174915b</span></span>
<span class="line"><span>Status: Downloaded newer image for redis:6.0.9</span></span>
<span class="line"><span>docker.io/library/redis:6.0.9</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）运行redis</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>root@hp-None:~# docker run -p 6379:6379 redis:6.0.9</span></span>
<span class="line"><span>1:C 22 Jul 2024 00:05:28.311 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span>
<span class="line"><span>1:C 22 Jul 2024 00:05:28.313 # Redis version=6.0.9, bits=64, commit=00000000, modified=0, pid=1, just started</span></span>
<span class="line"><span>1:C 22 Jul 2024 00:05:28.314 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf</span></span>
<span class="line"><span>1:M 22 Jul 2024 00:05:28.321 * Running mode=standalone, port=6379.</span></span>
<span class="line"><span>1:M 22 Jul 2024 00:05:28.322 # Server initialized</span></span>
<span class="line"><span>1:M 22 Jul 2024 00:05:28.323 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &#39;vm.overcommit_memory = 1&#39; to /etc/sysctl.conf and then reboot or run the command &#39;sysctl vm.overcommit_memory=1&#39; for this to take effect.</span></span>
<span class="line"><span>1:M 22 Jul 2024 00:05:28.326 * Ready to accept connections</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）进入容器</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>root@hp-None:~# docker ps</span></span>
<span class="line"><span>CONTAINER ID   IMAGE         COMMAND                   CREATED         STATUS         PORTS                                                  NAMES</span></span>
<span class="line"><span>56d60bb98f8b   redis:6.0.9   &quot;docker-entrypoint.s…&quot;   2 minutes ago   Up 2 minutes   0.0.0.0:6379-&gt;6379/tcp, :::6379-&gt;6379/tcp              thirsty_cray</span></span>
<span class="line"><span>02e6eb10762f   mysql:8.0     &quot;docker-entrypoint.s…&quot;   10 hours ago    Up 10 hours    0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   mysql8-02</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#进入容器</span></span>
<span class="line"><span>root@hp-None:~# docker exec -it 56d60bb98f8b bash</span></span>
<span class="line"><span>root@56d60bb98f8b:/data# redis-cli </span></span>
<span class="line"><span>127.0.0.1:6379&gt; keys *</span></span>
<span class="line"><span>(empty array)</span></span>
<span class="line"><span>127.0.0.1:6379&gt; set name zsan</span></span>
<span class="line"><span>OK</span></span>
<span class="line"><span>127.0.0.1:6379&gt; get name</span></span>
<span class="line"><span>&quot;zsan&quot;</span></span>
<span class="line"><span>127.0.0.1:6379&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用redis-desktop-manager连接：</p><p>（a）安装redis-desktop-manager-0.8.8.384.exe，傻瓜式安装。</p><p>（b）创建连接，点击“Connect to Redis Server”，设置如下</p><p>![](.\\images\\09redis desktop.png)</p><p>（c）查看redis存储</p><p><img src="`+e+`" alt=""></p><h3 id="任务二-实践redis数据类型与基本命令" tabindex="-1"><a class="header-anchor" href="#任务二-实践redis数据类型与基本命令"><span>任务二：实践Redis数据类型与基本命令</span></a></h3><h4 id="_2-1-任务描述" tabindex="-1"><a class="header-anchor" href="#_2-1-任务描述"><span>2-1 任务描述</span></a></h4><p>本任务旨在让我们熟练掌握 Redis 的 5 种核心数据类型，以及 Redis 基本命令的使用。通过实际操作，加深对不同数据类型适用场景的理解，能够根据需求选择合适的数据类型，并熟练运用各类命令完成数据的增删改查、生命周期管理及备份恢复等操作，为 Redis 在智慧医疗项目中的缓存优化打下扎实基础。</p><h4 id="_2-2-必备知识点" tabindex="-1"><a class="header-anchor" href="#_2-2-必备知识点"><span>2-2 必备知识点</span></a></h4><h5 id="_3-2-1-redis数据类型" tabindex="-1"><a class="header-anchor" href="#_3-2-1-redis数据类型"><span>3.2.1 Redis数据类型</span></a></h5><p>Redis 是一个高性能的键值存储系统，支持多种数据类型，每种类型适用于不同的场景。以下是 Redis 最常用的 <strong>5 种核心数据类型</strong> 及其应用场景：</p><p><strong>（1）String</strong></p><p><strong>简介</strong>：</p><ul><li>String是Redis中最基本的数据类型，可以存储任何形式的字符串，包括二进制数据（如图片或序列化的对象）。</li></ul><p><strong>常见使用场景</strong></p><ol><li><strong>缓存数据</strong>：将常用数据缓存在 Redis 中，提高访问速度。</li><li><strong>计数器</strong>：通过 INCR 和 DECR 命令实现计数器功能。</li><li><strong>分布式锁</strong>：通过 SETNX 命令实现分布式锁。</li><li><strong>会话存储</strong>：将用户会话信息存储在 Redis 中，实现快速访问。</li></ol><p><strong>性能优势</strong></p><ul><li><strong>快速读写</strong>：Redis 的 String 类型操作非常快速，读写操作的复杂度都是 O(1)。</li><li><strong>灵活性高</strong>：支持多种操作，包括字符串操作和数值操作，应用场景广泛。</li></ul><p>​ Redis 的 String 数据类型功能丰富，使用灵活，适用于多种不同的场景。了解并熟练掌握这些命令和操作，可以有效提高 Redis 在项目中的应用效果。</p><p><strong>操作命令</strong>：</p><ul><li>设置值：<code>SET key value</code></li><li>获取值：<code>GET key</code></li><li>递增值：<code>INCR key</code></li><li>递减值：<code>DECR key</code></li><li>设置带过期时间的值：<code>SETEX key seconds value</code></li></ul><p><strong>示例</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>SET mykey &quot;Hello, Redis!&quot;</span></span>
<span class="line"><span>GET mykey</span></span>
<span class="line"><span>INCR counter</span></span>
<span class="line"><span>SETEX session:1234 3600 &quot;user data&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>127.0.0.1:6379&gt; set mykey &quot;Hello Redis!&quot;</span></span>
<span class="line"><span>OK</span></span>
<span class="line"><span>127.0.0.1:6379&gt; get mykey</span></span>
<span class="line"><span>&quot;Hello Redis!&quot;</span></span>
<span class="line"><span>127.0.0.1:6379&gt; incr mycounter</span></span>
<span class="line"><span>(integer) 1</span></span>
<span class="line"><span>127.0.0.1:6379&gt; incr mycounter</span></span>
<span class="line"><span>(integer) 2</span></span>
<span class="line"><span>127.0.0.1:6379&gt; </span></span>
<span class="line"><span>127.0.0.1:6379&gt; incr mycounter</span></span>
<span class="line"><span>(integer) 3</span></span>
<span class="line"><span>127.0.0.1:6379&gt; decr mycounter</span></span>
<span class="line"><span>(integer) 2</span></span>
<span class="line"><span>127.0.0.1:6379&gt; SETEX hello_key 5 hello  #这个命令会将键hello_key设置为值hello，并且该键将在5秒后自动删除。</span></span>
<span class="line"><span>OK</span></span>
<span class="line"><span>127.0.0.1:6379&gt; get hello_key</span></span>
<span class="line"><span>&quot;hello&quot;</span></span>
<span class="line"><span>127.0.0.1:6379&gt; get hello_key</span></span>
<span class="line"><span>(nil)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（2）List</strong></p><p><strong>简介</strong>：</p><ul><li>List是按顺序排列的字符串集合，基于链表实现。</li></ul><p><strong>使用场景</strong>：</p><ul><li>消息队列，使用<code>LPUSH</code>和<code>BRPOP</code>实现。</li><li>任务队列，按照插入顺序处理任务。</li></ul><p><strong>操作命令</strong>：</p><ul><li>从左边插入：<code>LPUSH key value</code></li><li>从右边插入：<code>RPUSH key value</code></li><li>从左边弹出：<code>LPOP key</code></li><li>从右边弹出：<code>RPOP key</code></li><li>获取列表长度：<code>LLEN key</code></li></ul><p><strong>示例</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>127.0.0.1:6379&gt; lpush my_list &quot;world&quot;</span></span>
<span class="line"><span>(integer) 1</span></span>
<span class="line"><span>127.0.0.1:6379&gt; llen my_list</span></span>
<span class="line"><span>(integer) 1</span></span>
<span class="line"><span>127.0.0.1:6379&gt; lpush my_list &quot;hello&quot;</span></span>
<span class="line"><span>(integer) 2</span></span>
<span class="line"><span>127.0.0.1:6379&gt; llen my_list</span></span>
<span class="line"><span>(integer) 2</span></span>
<span class="line"><span>127.0.0.1:6379&gt; rpop my_list</span></span>
<span class="line"><span>&quot;world&quot;</span></span>
<span class="line"><span>127.0.0.1:6379&gt; llen my_list</span></span>
<span class="line"><span>(integer) 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（3）Set</strong></p><p><strong>简介</strong>：</p><ul><li>Set是无序的字符串集合，不允许重复成员。</li></ul><p><strong>使用场景</strong>：</p><ul><li>用户标签、分类标签等去重数据存储。</li><li>共同好友、共同兴趣等交集计算。</li></ul><p><strong>操作命令</strong>：</p><ul><li>添加成员：<code>SADD key member</code></li><li>移除成员：<code>SREM key member</code></li><li>检查成员是否存在：<code>SISMEMBER key member</code></li><li>获取集合所有成员：<code>SMEMBERS key</code></li><li>求交集：<code>SINTER key1 key2 ...</code></li></ul><p><strong>示例</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>127.0.0.1:6379&gt; SADD myset &quot;Hello&quot;</span></span>
<span class="line"><span>(integer) 1</span></span>
<span class="line"><span>127.0.0.1:6379&gt; SADD myset &quot;World&quot;</span></span>
<span class="line"><span>(integer) 1</span></span>
<span class="line"><span>127.0.0.1:6379&gt; SISMEMBER myset &quot;Hello&quot;</span></span>
<span class="line"><span>(integer) 1</span></span>
<span class="line"><span>127.0.0.1:6379&gt; SMEMBERS myset</span></span>
<span class="line"><span>1) &quot;World&quot;</span></span>
<span class="line"><span>2) &quot;Hello&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（4）Hash</strong></p><p><strong>简介</strong>：</p><ul><li>Hash是键值对集合，适用于存储对象。</li></ul><p><strong>使用场景</strong>：</p><ul><li>存储用户信息、商品信息等结构化数据。</li><li>实现多字段的存储和访问。</li></ul><p><strong>操作命令</strong>：</p><ul><li>设置字段值：<code>HSET key field value</code></li><li>获取字段值：<code>HGET key field</code></li><li>删除字段：<code>HDEL key field</code></li><li>获取所有字段和值：<code>HGETALL key</code></li><li>检查字段是否存在：<code>HEXISTS key field</code></li></ul><p><strong>示例</strong>：</p><p>uid name age 1001 Tom 13 1002 Jerry 18</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>127.0.0.1:6379&gt; HSET uid:1001 name &quot;Tom&quot;</span></span>
<span class="line"><span>(integer) 1</span></span>
<span class="line"><span>127.0.0.1:6379&gt; HSET uid:1001 age 13</span></span>
<span class="line"><span>(integer) 1</span></span>
<span class="line"><span>127.0.0.1:6379&gt; HSET uid:1002 name &quot;Jerry&quot; age 18</span></span>
<span class="line"><span>(integer) 2</span></span>
<span class="line"><span>127.0.0.1:6379&gt; HGET uid:1001 name</span></span>
<span class="line"><span>&quot;Tom&quot;</span></span>
<span class="line"><span>127.0.0.1:6379&gt; HGETALL uid:1001</span></span>
<span class="line"><span>1) &quot;name&quot;</span></span>
<span class="line"><span>2) &quot;Tom&quot;</span></span>
<span class="line"><span>3) &quot;age&quot;</span></span>
<span class="line"><span>4) &quot;13&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（5） Sorted Set</strong></p><p><strong>简介</strong>：</p><ul><li>Sorted Set是带有分数的有序集合，成员按分数排序。</li></ul><p><strong>使用场景</strong>：</p><ul><li>排行榜、评分系统。</li><li>实现带优先级的队列。</li></ul><p><strong>操作命令</strong>：</p><ul><li>添加成员：<code>ZADD key score member</code></li><li>获取成员的分数：<code>ZSCORE key member</code></li><li>按分数区间获取成员：<code>ZRANGEBYSCORE key min max</code></li><li>获取排名：<code>ZRANK key member</code>（默认升序）</li><li>获取有序集合成员数量：<code>ZCARD key</code></li></ul><p><strong>示例</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>127.0.0.1:6379&gt; ZADD leaderboard 100 &quot;Alice&quot;</span></span>
<span class="line"><span>(integer) 1</span></span>
<span class="line"><span>127.0.0.1:6379&gt; ZADD leaderboard 200 &quot;Bob&quot;</span></span>
<span class="line"><span>(integer) 1</span></span>
<span class="line"><span>127.0.0.1:6379&gt; ZRANGEBYSCORE leaderboard 0 100</span></span>
<span class="line"><span>1) &quot;Alice&quot;</span></span>
<span class="line"><span>127.0.0.1:6379&gt; ZSCORE leaderboard &quot;Alice&quot;</span></span>
<span class="line"><span>&quot;100&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（6） 总结</strong></p><p><strong>各种数据类型特点和使用场景总结</strong></p><table><thead><tr><th>数据类型</th><th>特点</th><th>典型场景</th></tr></thead><tbody><tr><td><strong>String</strong></td><td>简单键值对</td><td>缓存、计数器、分布式锁</td></tr><tr><td><strong>Hash</strong></td><td>对象存储</td><td>用户信息、商品详情</td></tr><tr><td><strong>List</strong></td><td>双向链表</td><td>消息队列、最新消息</td></tr><tr><td><strong>Set</strong></td><td>无序唯一集合</td><td>标签、共同关注、去重</td></tr><tr><td><strong>ZSet</strong></td><td>有序集合（带分数）</td><td>排行榜、延迟队列</td></tr></tbody></table><h5 id="_3-2-2-redis基本命令" tabindex="-1"><a class="header-anchor" href="#_3-2-2-redis基本命令"><span>3.2.2 Redis基本命令</span></a></h5><p>以下是 Redis 中关于 <strong>设置与获取值、删除值、键管理、数据备份与恢复</strong> 的核心命令详解及示例，涵盖生产环境常用场景和注意事项：</p><p><strong>（1 ）设置与获取值（SET, GET）</strong></p><ol><li><p><strong>设置值</strong>：<code>SET</code></p><ul><li><p>用于设置指定键的值。</p></li><li><p>格式：<code>SET key value</code></p></li><li><p>示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>SET mykey &quot;Hello, Redis!&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li><p><strong>获取值</strong>：<code>GET</code></p><ul><li><p>用于获取指定键的值。</p></li><li><p>格式：<code>GET key</code></p></li><li><p>示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>GET mykey</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li></ol><p><strong>（2）删除值（DEL）</strong></p><ol><li><p><strong>删除值：<code>DEL</code></strong></p><ul><li><p>用于删除指定的键。</p></li><li><p>格式：<code>DEL key [key ...]</code></p></li><li><p>示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>DEL key1 key2 key3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li></ol><p><strong>（3） 键的管理（EXISTS, EXPIRE, TTL）</strong></p><ol><li><p><strong>检查键是否存在</strong>：<code>EXISTS</code></p><ul><li><p>用于检查一个键是否存在。</p></li><li><p>格式：<code>EXISTS key</code></p></li><li><p>示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>EXISTS mykey</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li><p><strong>设置键的过期时间</strong>：<code>EXPIRE</code></p><ul><li><p>用于设置键的过期时间（以秒为单位）。</p></li><li><p>格式：<code>EXPIRE key seconds</code></p></li><li><p>示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>EXPIRE mykey 60</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li><p><strong>检查键的剩余生存时间</strong>：<code>TTL</code></p><ul><li><p>用于获取键的剩余生存时间（以秒为单位）。</p></li><li><p>格式：<code>TTL key</code></p></li><li><p>示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>TTL mykey</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li></ol><p><strong>（4） 数据备份与恢复（SAVE, BGSAVE, RESTORE）</strong></p><ol><li><p><strong>保存数据快照</strong>：<code>SAVE</code></p><ul><li><p>立即创建数据快照并阻塞Redis服务器，直到快照完成。</p></li><li><p>格式：<code>SAVE</code></p></li><li><p>语法：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>SAVE</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用 <strong>save</strong> 命令进行同步备份，备份后的数据默认保存在 <strong>dump.rdb</strong> 文件。可以使用 config get dir 命令查看 。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>127.0.0.1:6379&gt; save</span></span>
<span class="line"><span>OK</span></span>
<span class="line"><span>127.0.0.1:6379&gt; config get dir</span></span>
<span class="line"><span>1) &quot;dir&quot;</span></span>
<span class="line"><span>2) &quot;/data&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进入容器目录</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>root@hp-None:~/data# docker exec -it 3e1 bash</span></span>
<span class="line"><span>root@3e152399b508:/data# ls</span></span>
<span class="line"><span>dump.rdb</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>后台保存数据快照</strong>：<code>BGSAVE</code></p><ul><li><p>在后台异步保存数据快照，不会阻塞Redis服务器。</p></li><li><p>格式：<code>BGSAVE</code></p></li><li><p>语法：</p></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>BGSAVE [SCHEDULE]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>示例：</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>127.0.0.1:6379&gt; BGSAVE</span></span>
<span class="line"><span>Background saving started</span></span>
<span class="line"><span>127.0.0.1:6379&gt; BGSAVE SCHEDULE</span></span>
<span class="line"><span>Background saving started</span></span>
<span class="line"><span>127.0.0.1:6379&gt; lastsave</span></span>
<span class="line"><span>(integer) 1753088801</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用 LASTSAVE 命令检查操作是否成功。</p></li><li><p><strong>恢复数据</strong>：<code>RESTORE</code></p></li></ol><ul><li><p>假设我们有一个键 <code>mykey</code>，我们想要备份并恢复这个键。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span> set key1 &quot;Hello Redis!&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>使用 <code>DUMP</code> 命令获取序列化值：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>dump key1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>使用 <code>RESTORE</code> 命令恢复这个键：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>restore key1 0 &quot;\\x00\\x0cHello Redis!\\t\\x00\\xfa\\xb1\\xffv\\xc1\\xd2\\xcb\\x9b&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>127.0.0.1:6379&gt; set key1 &quot;Hello Redis!&quot;</span></span>
<span class="line"><span>OK</span></span>
<span class="line"><span>127.0.0.1:6379&gt; dump key1</span></span>
<span class="line"><span>&quot;\\x00\\x0cHello Redis!\\t\\x00\\xfa\\xb1\\xffv\\xc1\\xd2\\xcb\\x9b&quot;</span></span>
<span class="line"><span>127.0.0.1:6379&gt; get key1</span></span>
<span class="line"><span>&quot;Hello Redis!&quot;</span></span>
<span class="line"><span>(error) BUSYKEY Target key name already exists.</span></span>
<span class="line"><span>127.0.0.1:6379&gt; del key1</span></span>
<span class="line"><span>(integer) 1</span></span>
<span class="line"><span>127.0.0.1:6379&gt; restore key1 0 &quot;\\x00\\x0cHello Redis!\\t\\x00\\xfa\\xb1\\xffv\\xc1\\xd2\\xcb\\x9b&quot;</span></span>
<span class="line"><span>OK</span></span>
<span class="line"><span>127.0.0.1:6379&gt; get key1</span></span>
<span class="line"><span>&quot;Hello Redis!&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（5 ）总结</p><p>Redis提供了多种基本命令来管理键值对、控制键的生命周期以及进行数据备份和恢复。熟练掌握这些命令有助于高效地操作和维护Redis数据库。</p><ol><li><strong>设置与获取值</strong>： <ul><li>设置值：<code>SET key value</code></li><li>获取值：<code>GET key</code></li></ul></li><li><strong>删除值</strong>： <ul><li>删除值：<code>DEL key [key ...]</code></li></ul></li><li><strong>键的管理</strong>： <ul><li>检查键是否存在：<code>EXISTS key</code></li><li>设置键的过期时间：<code>EXPIRE key seconds</code></li><li>检查键的剩余生存时间：<code>TTL key</code></li></ul></li><li><strong>数据备份与恢复</strong>： <ul><li>立即保存数据快照：<code>SAVE</code></li><li>后台保存数据快照：<code>BGSAVE</code></li><li>恢复数据：<code>RESTORE key ttl serialized-value</code></li></ul></li></ol><p>这些基本命令是Redis操作的基础，了解并掌握它们可以大大提高Redis使用的效率和可靠性。</p><h4 id="_2-3-任务实施" tabindex="-1"><a class="header-anchor" href="#_2-3-任务实施"><span>2-3 任务实施</span></a></h4><h5 id="_3-2-1-用-hash-保存并查询患者信息" tabindex="-1"><a class="header-anchor" href="#_3-2-1-用-hash-保存并查询患者信息"><span>3-2-1 用 Hash 保存并查询患者信息</span></a></h5><p>在 Redis 中以 Hash 形式存储两位患者（uid:2001 与 uid:2002）的姓名、年龄、病历号，随后查询并更新其中一位患者的年龄。</p><p>实施步骤如下所示。</p><p>（1）进入容器</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>docker exec -it &lt;容器ID&gt; redis-cli</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（2）写入数据</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>HSET uid:2001 name &quot;李雷&quot; age 34 record &quot;A1024&quot;</span></span>
<span class="line"><span>HSET uid:2002 name &quot;韩梅梅&quot; age 29 record &quot;A1025&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）查询 uid:2001 的完整信息</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>HGETALL uid:2001</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（4）将 uid:2001 的年龄改为 35</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>HSET uid:2001 age 35</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（5）验证更新</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>HGET uid:2001 age</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="_3-2-2-利用-sorted-set-实现药品销量排行榜并备份" tabindex="-1"><a class="header-anchor" href="#_3-2-2-利用-sorted-set-实现药品销量排行榜并备份"><span>3-2-2 利用 Sorted Set 实现药品销量排行榜并备份</span></a></h5><p>将 3 种药品的销量写入 Sorted Set，随后使用备份命令持久化数据，最后恢复并验证排行榜。</p><p>实施步骤如下所示。</p><p>（1）写入排行榜（score 即销量）</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>ZADD drug:sales 1200 &quot;阿莫西林&quot; 950 &quot;布洛芬&quot; 1350 &quot;维生素C&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（2）查看销量前 2 名</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>ZREVRANGE drug:sales 0 1 WITHSCORES</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（3）立即执行快照备份</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>SAVE                # 或 BGSAVE</span></span>
<span class="line"><span>CONFIG GET dir      # 记下 /data 目录</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>（4）退出容器并复制 dump.rdb 到宿主机备份</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>docker cp &lt;容器ID&gt;:/data/dump.rdb ~/drug_sales_backup.rdb</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（5）模拟数据丢失：删除 key</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>DEL drug:sales</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（6）停止容器，将备份文件拷回并重启容器，验证排行榜已恢复</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>docker cp ~/drug_sales_backup.rdb &lt;新容器ID&gt;:/data/dump.rdb</span></span>
<span class="line"><span>docker restart &lt;新容器ID&gt;</span></span>
<span class="line"><span>docker exec -it &lt;新容器ID&gt; redis-cli</span></span>
<span class="line"><span>ZREVRANGE drug:sales 0 -1 WITHSCORES</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="任务三-开启智慧医疗项目持久化" tabindex="-1"><a class="header-anchor" href="#任务三-开启智慧医疗项目持久化"><span>任务三：开启智慧医疗项目持久化</span></a></h3><h4 id="_3-1-任务描述" tabindex="-1"><a class="header-anchor" href="#_3-1-任务描述"><span>3-1 任务描述</span></a></h4><p>本任务聚焦智慧医疗项目持久化，通过 Docker 部署 Redis 并配置持久化与数据卷映射，确保缓存数据持久化存储，提升项目稳定性。需掌握 Redis 容器的后台启动、持久化配置（AOF 模式）及数据卷挂载，解决容器删除导致的数据丢失问题，为智慧医疗项目提供可靠的缓存支持，保障患者信息、药品数据等关键缓存数据的安全性与连续性。</p><h4 id="_3-2-必备知识点" tabindex="-1"><a class="header-anchor" href="#_3-2-必备知识点"><span>3-2 必备知识点</span></a></h4><h5 id="_3-3-1-redis持久化" tabindex="-1"><a class="header-anchor" href="#_3-3-1-redis持久化"><span>3.3.1 Redis持久化</span></a></h5><p>Redis 持久化是将存储在内存中的数据库数据保存到磁盘上的过程，目的是在服务器重启后能够恢复数据，防止因进程退出或机器故障导致的数据丢失。Redis 提供了两种主要的持久化机制：<strong>RDB (快照)</strong> 和 <strong>AOF (追加日志</strong>)，以及结合了两者优点的<strong>混合持久化 (RDB-AOF)</strong>。</p><h6 id="_3-3-1-1-rdb-redis-database" tabindex="-1"><a class="header-anchor" href="#_3-3-1-1-rdb-redis-database"><span>3.3.1.1 RDB（Redis DataBase）</span></a></h6><p><strong>工作原理</strong></p><ol><li><p><strong>生成快照</strong>：</p><ul><li>Redis使用RDB持久化机制通过在某个时刻创建数据库的完整数据快照来实现持久化。这些快照是二进制格式的文件，通常命名为<code>dump.rdb</code>。</li><li>快照的创建方式可以是同步（<code>SAVE</code>命令）或异步（<code>BGSAVE</code>命令）。</li></ul></li><li><p><strong>快照创建过程</strong>：</p><ul><li><strong><code>SAVE</code>命令</strong>：在执行<code>SAVE</code>命令时，Redis会阻塞主进程，创建一个新的RDB快照。这可能导致Redis响应其他命令的延迟，因此在生产环境中不推荐使用。</li><li><strong><code>BGSAVE</code>命令</strong>：在执行<code>BGSAVE</code>时，Redis会创建一个子进程来生成RDB快照，主进程不会被阻塞。这种方式较为高效，适用于生产环境。</li></ul></li><li><p><strong>触发条件</strong>：</p><ul><li><p>RDB持久化可以根据配置的条件定期生成快照。例如，在配置文件中可以设置如下条件：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>save 900 1</span></span>
<span class="line"><span>save 300 10</span></span>
<span class="line"><span>save 60 10000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这意味着如果900秒内有至少1次写操作，300秒内有至少10次写操作，或60秒内有至少10000次写操作，Redis将创建一个RDB快照。</p></li></ul></li><li><p><strong>恢复过程</strong>：</p><ul><li>启动Redis时，如果存在RDB文件，Redis会使用该文件恢复数据库状态。恢复过程是直接将快照文件加载到内存中，因此恢复速度较快。</li></ul></li></ol><p><strong>优缺点</strong></p><ul><li><strong>优点</strong>： <ul><li><strong>性能</strong>：RDB快照的生成是异步的，不会阻塞主进程，适用于需要较高性能的场景。</li><li><strong>恢复速度</strong>：RDB文件通常比AOF文件小，恢复时加载速度快。</li><li><strong>备份</strong>：RDB文件便于备份和迁移。</li></ul></li><li><strong>缺点</strong>： <ul><li><strong>数据丢失</strong>：RDB的快照是周期性的，因此在最后一次快照之后到崩溃发生之间的数据可能会丢失。</li><li><strong>快照时间</strong>：快照生成的时间点可能与实际数据状态有延迟，不适合对数据一致性要求极高的场景。</li></ul></li></ul><h6 id="_3-3-1-2-aof-append-only-file" tabindex="-1"><a class="header-anchor" href="#_3-3-1-2-aof-append-only-file"><span>3.3.1.2 AOF（Append-Only File）</span></a></h6><p><strong>工作原理</strong></p><ol><li><strong>命令追加</strong>： <ul><li>AOF持久化机制通过将每个写操作（如<code>SET</code>、<code>DEL</code>等）追加到一个AOF文件（通常命名为<code>appendonly.aof</code>）来实现持久化。</li></ul></li><li><strong>写入策略</strong>： <ul><li><strong><code>appendfsync always</code></strong>：每次写操作都会同步到磁盘。这种方式提供了最好的数据安全性，但性能较差。</li><li><strong><code>appendfsync everysec</code></strong>：每秒同步一次。性能与数据安全性之间的平衡，适用于大多数场景。</li><li><strong><code>appendfsync no</code></strong>：由操作系统决定何时将数据同步到磁盘，性能最佳，但数据安全性较差。</li></ul></li><li><strong>文件重写</strong>： <ul><li>随着时间推移，AOF文件可能会变得非常大。Redis提供了<code>BGREWRITEAOF</code>命令来重写AOF文件。这会创建一个新的AOF文件，其中仅包含当前数据库状态的最小化命令集，从而减少文件大小。</li><li><code>BGREWRITEAOF</code>是一个后台进程，不会阻塞主Redis进程。</li></ul></li><li><strong>恢复过程</strong>： <ul><li>启动Redis时，如果存在AOF文件，Redis会按顺序执行AOF文件中的命令来恢复数据库状态。这确保了恢复的数据与崩溃时的状态尽可能一致。</li></ul></li></ol><p><strong>优缺点</strong></p><ul><li><p><strong>优点</strong>：</p><ul><li><strong>数据完整性</strong>：AOF记录了所有写操作，因此数据恢复通常能恢复到最近的状态，数据丢失较少。</li><li><strong>数据一致性</strong>：适合对数据一致性要求较高的场景。</li><li><strong>操作记录</strong>：AOF文件可以作为操作的记录，便于审计和追踪。</li></ul></li><li><p><strong>缺点</strong>：</p><ul><li><strong>性能</strong>：AOF文件写入频繁，可能影响Redis的性能，尤其是在使用<code>appendfsync always</code>时。</li><li><strong>恢复速度</strong>：由于需要重放所有写操作，恢复速度可能较慢。</li><li><strong>文件碎片化</strong>：AOF文件可能随着时间增长而变得很大，尽管可以通过<code>BGREWRITEAOF</code>进行优化，但仍需定期维护。</li></ul><h4 id="aof配置" tabindex="-1"><a class="header-anchor" href="#aof配置"><span>AOF配置</span></a></h4><p>打开AOF</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>appendonly yes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>AOF文件名字（可以自定义后缀必须是.aof）</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>appendfilename &quot;appendonly.aof&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h6 id="_3-3-1-3-rdb和aof" tabindex="-1"><a class="header-anchor" href="#_3-3-1-3-rdb和aof"><span>3.3.1.3 RDB和AOF</span></a></h6><ul><li><p><strong>RDB和AOF的结合</strong>：</p><ul><li>在生产环境中，许多用户选择同时启用RDB和AOF持久化机制。这样可以在重启时使用RDB文件进行快速恢复，同时利用AOF确保数据的最新状态和一致性。</li></ul></li><li><p><strong>配置示例</strong>：</p><ul><li><p>在</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>redis.conf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>配置文件中，你可以同时启用RDB和AOF持久化：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span># RDB配置</span></span>
<span class="line"><span>save 900 1</span></span>
<span class="line"><span>save 300 10</span></span>
<span class="line"><span>save 60 10000</span></span>
<span class="line"><span></span></span>
<span class="line"><span># AOF配置</span></span>
<span class="line"><span>appendonly yes</span></span>
<span class="line"><span>appendfsync everysec</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>选择策略</strong>：</p><ul><li><strong>高性能应用</strong>：如果对数据丢失的容忍度较高，可以选择仅使用RDB持久化。</li><li><strong>高数据安全性要求</strong>：如果需要最小化数据丢失，可以选择仅使用AOF持久化，或同时使用RDB和AOF。</li></ul></li></ul><p>通过合理配置RDB和AOF持久化机制，可以在性能和数据安全性之间取得适当的平衡，满足不同应用场景的需求。</p><h6 id="_3-3-1-4-持久化方式对比与选择建议" tabindex="-1"><a class="header-anchor" href="#_3-3-1-4-持久化方式对比与选择建议"><span>3.3.1.4 <strong>持久化方式对比与选择建议</strong></span></a></h6><table><thead><tr><th><strong>场景</strong></th><th><strong>推荐方式</strong></th><th><strong>理由</strong></th></tr></thead><tbody><tr><td>追求恢复速度</td><td>RDB 或混合持久化</td><td>RDB 加载快，混合持久化兼顾速度与完整性。</td></tr><tr><td>数据安全性要求高</td><td>AOF 或混合持久化</td><td>AOF 记录所有操作，混合持久化减少数据丢失风险。</td></tr><tr><td>高并发写入场景</td><td>AOF（<code>everysec</code>）</td><td>平衡性能与安全，避免频繁 <code>fork()</code> 影响主线程。</td></tr><tr><td>资源受限环境</td><td>RDB</td><td>文件体积小，对磁盘 I/O 压力低。</td></tr></tbody></table><h4 id="_3-3-任务实施" tabindex="-1"><a class="header-anchor" href="#_3-3-任务实施"><span>3-3 任务实施</span></a></h4><p>开启智慧医疗项目持久化，实施步骤如下所示。</p><p>（1）拉取redis:6.0.9</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>root@hp-None:~# docker pull redis:6.0.9</span></span>
<span class="line"><span>6.0.9: Pulling from library/redis</span></span>
<span class="line"><span>a076a628af6f: Pull complete </span></span>
<span class="line"><span>f40dd07fe7be: Pull complete </span></span>
<span class="line"><span>ce21c8a3dbee: Pull complete </span></span>
<span class="line"><span>47b0fe76214f: Pull complete </span></span>
<span class="line"><span>6c5e46e23ecb: Pull complete </span></span>
<span class="line"><span>e81e24116351: Pull complete </span></span>
<span class="line"><span>Digest: sha256:48c1431bed43fb2645314e4a22d6ca03cf36c5541d034de6a4f3330e7174915b</span></span>
<span class="line"><span>Status: Downloaded newer image for redis:6.0.9</span></span>
<span class="line"><span>docker.io/library/redis:6.0.9</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）运行redis</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>root@hp-None:~# docker run -p 6379:6379 redis:6.0.9</span></span>
<span class="line"><span>1:C 22 Jul 2024 00:05:28.311 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span>
<span class="line"><span>1:C 22 Jul 2024 00:05:28.313 # Redis version=6.0.9, bits=64, commit=00000000, modified=0, pid=1, just started</span></span>
<span class="line"><span>1:C 22 Jul 2024 00:05:28.314 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf</span></span>
<span class="line"><span>1:M 22 Jul 2024 00:05:28.321 * Running mode=standalone, port=6379.</span></span>
<span class="line"><span>1:M 22 Jul 2024 00:05:28.322 # Server initialized</span></span>
<span class="line"><span>1:M 22 Jul 2024 00:05:28.323 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &#39;vm.overcommit_memory = 1&#39; to /etc/sysctl.conf and then reboot or run the command &#39;sysctl vm.overcommit_memory=1&#39; for this to take effect.</span></span>
<span class="line"><span>1:M 22 Jul 2024 00:05:28.326 * Ready to accept connections</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）进入容器</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>root@hp-None:~# docker ps</span></span>
<span class="line"><span>CONTAINER ID   IMAGE         COMMAND                   CREATED         STATUS         PORTS                                                  NAMES</span></span>
<span class="line"><span>56d60bb98f8b   redis:6.0.9   &quot;docker-entrypoint.s…&quot;   2 minutes ago   Up 2 minutes   0.0.0.0:6379-&gt;6379/tcp, :::6379-&gt;6379/tcp              thirsty_cray</span></span>
<span class="line"><span>02e6eb10762f   mysql:8.0     &quot;docker-entrypoint.s…&quot;   10 hours ago    Up 10 hours    0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   mysql8-02</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#进入容器</span></span>
<span class="line"><span>root@hp-None:~# docker exec -it 56d60bb98f8b bash</span></span>
<span class="line"><span>root@56d60bb98f8b:/data# redis-cli </span></span>
<span class="line"><span>127.0.0.1:6379&gt; keys *</span></span>
<span class="line"><span>(empty array)</span></span>
<span class="line"><span>127.0.0.1:6379&gt; set name zsan</span></span>
<span class="line"><span>OK</span></span>
<span class="line"><span>127.0.0.1:6379&gt; get name</span></span>
<span class="line"><span>&quot;zsan&quot;</span></span>
<span class="line"><span>127.0.0.1:6379&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用redis-desktop-manager连接：</p><p>（a）安装redis-desktop-manager-0.8.8.384.exe，傻瓜式安装。</p><p>（b）创建连接，点击“Connect to Redis Server”，设置如下</p><p>![image-20240722081732351](.\\images\\09redis desktop.png)</p><p>（c）查看redis存储</p><p><img src="`+e+`" alt="image-20240722081908482"></p><p>（4）启动redis，映射端口，后台启动，指定名称，总是启动</p><p>docker run -p 6379:6379 -d --name redis01 --restart=always redis:6.0.9</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>#停止上面的redis</span></span>
<span class="line"><span>root@hp-None:~# docker stop 56d60bb98f8b</span></span>
<span class="line"><span>56d60bb98f8b</span></span>
<span class="line"><span>#查看运行的容器</span></span>
<span class="line"><span>root@hp-None:~# docker ps</span></span>
<span class="line"><span>CONTAINER ID   IMAGE       COMMAND                   CREATED        STATUS        PORTS                                                  NAMES</span></span>
<span class="line"><span>02e6eb10762f   mysql:8.0   &quot;docker-entrypoint.s…&quot;   21 hours ago   Up 21 hours   0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   mysql8-02</span></span>
<span class="line"><span>#运行redis</span></span>
<span class="line"><span>root@hp-None:~# docker run -p 6379:6379 -d --name redis01 --restart=always redis:6.0.9</span></span>
<span class="line"><span>7125eec681d09c0d13478f38310c28f4b7bab397751cf0d3a59a6e8d74d9282e</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#查看运行的容器</span></span>
<span class="line"><span>root@hp-None:~# docker ps</span></span>
<span class="line"><span>CONTAINER ID   IMAGE         COMMAND                   CREATED         STATUS         PORTS                                                  NAMES</span></span>
<span class="line"><span>7125eec681d0   redis:6.0.9   &quot;docker-entrypoint.s…&quot;   2 minutes ago   Up 2 minutes   0.0.0.0:6379-&gt;6379/tcp, :::6379-&gt;6379/tcp              redis01</span></span>
<span class="line"><span>02e6eb10762f   mysql:8.0     &quot;docker-entrypoint.s…&quot;   21 hours ago    Up 21 hours    0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   mysql8-02</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用redis-desktop-manager查看redis</p><p><img src="`+o+`" alt="image-20240722191640652"></p><p>发现前面存在redis里的数据没有了，说明redis没有持久化。</p><p>redis支持内存数据库持久化：</p><p>a）rdb持久化：快照Redis服务器将某一时刻数据以快照文件形式写入磁盘</p><p>b）aof持久化：Redis服务器将所有Redis客户端的写操作以命令方式记录到日志文件中（AOF更加安全）</p><p>（5）启动redis，映射端口，后台启动，指定名称，总是启动 --restart=always，运行redis开启持久化。</p><p>docker run -p 6379:6379 -d --name redis02 --restart=always redis:6.0.9 redis-server --appendonly yes</p><p><strong>注意：只要开启了持久化，将持久化文件生成在容器的/data/目录中</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>#停止前面的redis</span></span>
<span class="line"><span>root@hp-None:~# docker stop 7125eec681d0</span></span>
<span class="line"><span>7125eec681d0</span></span>
<span class="line"><span>root@hp-None:~# docker ps</span></span>
<span class="line"><span>CONTAINER ID   IMAGE       COMMAND                   CREATED        STATUS        PORTS                                                  NAMES</span></span>
<span class="line"><span>02e6eb10762f   mysql:8.0   &quot;docker-entrypoint.s…&quot;   22 hours ago   Up 22 hours   0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   mysql8-02</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#运行redis</span></span>
<span class="line"><span>root@hp-None:~# docker run -p 6379:6379 -d --name redis02 --restart=always redis:6.0.9 redis-server --appendonly yes</span></span>
<span class="line"><span>c79cc7d208c8daaeea9337306a1d4369ebda58e7d799543e4907cd53eb5c50fb</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#进入redis容器</span></span>
<span class="line"><span>root@hp-None:~# docker exec -it c79 bash</span></span>
<span class="line"><span>root@c79cc7d208c8:/data# ls</span></span>
<span class="line"><span>appendonly.aof</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用redis-desktop-manager添加数据</p><p><img src="`+u+`" alt="image-20240722203451455"></p><p>查看appendonly.aof内容</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>root@c79cc7d208c8:/data# cat appendonly.aof </span></span>
<span class="line"><span>*2</span></span>
<span class="line"><span>$6</span></span>
<span class="line"><span>SELECT</span></span>
<span class="line"><span>$1</span></span>
<span class="line"><span>0</span></span>
<span class="line"><span>*3</span></span>
<span class="line"><span>$3</span></span>
<span class="line"><span>SET</span></span>
<span class="line"><span>$4</span></span>
<span class="line"><span>name</span></span>
<span class="line"><span>$4</span></span>
<span class="line"><span>lisi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时删除redis容器，数据也会跟着删除，因为appendonly.aof文件删除了。</p><p>（6）启动redis，映射端口，后台启动，指定名称，总是启动 --restart=always，运行redis开启持久化，使用数据卷映射到外部。</p><p>docker run -p 6379:6379 -d --name redis03 --restart=always -v /root/redisdata:/data redis:6.0.9 redis-server --appendonly yes</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>#查看运行的容器</span></span>
<span class="line"><span>root@hp-None:~# docker ps</span></span>
<span class="line"><span>CONTAINER ID   IMAGE         COMMAND                   CREATED        STATUS        PORTS                                                  NAMES</span></span>
<span class="line"><span>c79cc7d208c8   redis:6.0.9   &quot;docker-entrypoint.s…&quot;   11 hours ago   Up 11 hours   0.0.0.0:6379-&gt;6379/tcp, :::6379-&gt;6379/tcp              redis02</span></span>
<span class="line"><span>02e6eb10762f   mysql:8.0     &quot;docker-entrypoint.s…&quot;   33 hours ago   Up 33 hours   0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   mysql8-02</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#停止redis容器</span></span>
<span class="line"><span>root@hp-None:~# docker stop c79cc7d208c8</span></span>
<span class="line"><span>c79cc7d208c8</span></span>
<span class="line"><span>#运行redis</span></span>
<span class="line"><span>root@hp-None:~# docker run -p 6379:6379 -d --name redis03 --restart=always -v /root/redisdata:/data redis:6.0.9 redis-server --appendonly yes</span></span>
<span class="line"><span>e620f076d8eda654ecf815c6e7319381d312b76060ac50051b252c4fc316fd80</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#进入redis容器</span></span>
<span class="line"><span>root@hp-None:~# docker exec -it e62 bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用redis desktop添加数据。然后查看appendonly.aof</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>root@hp-None:~# ls</span></span>
<span class="line"><span>abc.txt  data  hp  redisdata  RUNNING.txt  snap</span></span>
<span class="line"><span>root@hp-None:~# cd redisdata/</span></span>
<span class="line"><span>root@hp-None:~/redisdata# ls</span></span>
<span class="line"><span>appendonly.aof</span></span>
<span class="line"><span>root@hp-None:~/redisdata# cat appendonly.aof </span></span>
<span class="line"><span>*2</span></span>
<span class="line"><span>$6</span></span>
<span class="line"><span>SELECT</span></span>
<span class="line"><span>$1</span></span>
<span class="line"><span>0</span></span>
<span class="line"><span>*3</span></span>
<span class="line"><span>$3</span></span>
<span class="line"><span>SET</span></span>
<span class="line"><span>$4</span></span>
<span class="line"><span>name</span></span>
<span class="line"><span>$6</span></span>
<span class="line"><span>wangwu</span></span>
<span class="line"><span>*3</span></span>
<span class="line"><span>$3</span></span>
<span class="line"><span>SET</span></span>
<span class="line"><span>$3</span></span>
<span class="line"><span>age</span></span>
<span class="line"><span>$2</span></span>
<span class="line"><span>22</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除redis容器，重新运行redis</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>root@hp-None:~# docker ps</span></span>
<span class="line"><span>CONTAINER ID   IMAGE         COMMAND                   CREATED         STATUS         PORTS                                                  NAMES</span></span>
<span class="line"><span>e620f076d8ed   redis:6.0.9   &quot;docker-entrypoint.s…&quot;   9 minutes ago   Up 9 minutes   0.0.0.0:6379-&gt;6379/tcp, :::6379-&gt;6379/tcp              redis03</span></span>
<span class="line"><span>02e6eb10762f   mysql:8.0     &quot;docker-entrypoint.s…&quot;   33 hours ago    Up 33 hours    0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   mysql8-02</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#删除redis容器</span></span>
<span class="line"><span>root@hp-None:~# docker rm -f e62</span></span>
<span class="line"><span>e62</span></span>
<span class="line"><span>#重新运行redis容器</span></span>
<span class="line"><span>root@hp-None:~# docker run -p 6379:6379 -d --name redis03 --restart=always -v /root/redisdata:/data redis:6.0.9 redis-server --appendonly yes</span></span>
<span class="line"><span>834a021d5e54be1021e780cb3351c0a6b2053db7e58307407cc9c31de4c958d2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看redis是否还有之前的数据</p><p><img src="`+g+'" alt="image-20240723073739672"></p>',211)]))}const k=i(v,[["render",h]]),f=JSON.parse('{"path":"/article/31mlm1s8/","title":"开启xxxx项目持久化","lang":"zh-CN","frontmatter":{"title":"开启xxxx项目持久化","createTime":"2025/08/15 14:06:38","permalink":"/article/31mlm1s8/"},"readingTime":{"minutes":24.22,"words":7267},"git":{"createdTime":1754385901000,"updatedTime":1755240741000,"contributors":[{"name":"elvishehai521@163.com","username":"","email":"elvishehai521@163.com","commits":2,"avatar":"https://gravatar.com/avatar/6a640db68c5bf3768af7413cb28623721edb88b0f88957ed42c162769c5f659c?d=retro"}]},"filePathRelative":"notes/docker/开启xxxx项目持久化.md","headers":[],"categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"154f33","sort":10001,"name":"docker"}]}');export{k as comp,f as data};
